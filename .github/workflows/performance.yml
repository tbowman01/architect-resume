name: ⚡ Performance Testing

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      url:
        description: 'URL to test (leave empty for automatic detection)'
        required: false
        type: string
  schedule:
    - cron: '0 6 * * 1' # Weekly on Monday at 6 AM UTC

concurrency:
  group: performance-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lighthouse-audit:
    name: 🔍 Lighthouse Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        device: ['desktop', 'mobile']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install -g @lhci/cli@0.12.x

      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: 🌐 Start local server
        run: |
          npm start &
          sleep 10
          curl -f http://localhost:3000 || exit 1
        env:
          NODE_ENV: production

      - name: 🔍 Run Lighthouse CI (${{ matrix.device }})
        run: |
          lhci autorun --config=lighthouserc.js
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}
          DEVICE_TYPE: ${{ matrix.device }}

      - name: 📊 Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results-${{ matrix.device }}
          path: |
            .lighthouseci/
            lhci_reports/
          retention-days: 30

  web-vitals:
    name: 📈 Web Vitals Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install -g web-vitals-cli

      - name: 🏗️ Build application
        run: npm run build

      - name: 🌐 Start server and test vitals
        run: |
          npm start &
          SERVER_PID=$!
          sleep 15
          
          # Test Core Web Vitals
          echo "🔍 Testing Core Web Vitals..."
          curl -f http://localhost:3000 || exit 1
          
          # Kill server
          kill $SERVER_PID || true
          echo "✅ Web Vitals test completed"

  bundle-analysis:
    name: 📦 Bundle Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install -g @next/bundle-analyzer

      - name: 🔍 Analyze bundle
        run: |
          ANALYZE=true npm run build
          echo "📊 Bundle analysis completed"
        env:
          NODE_ENV: production

      - name: 📊 Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            .next/analyze/
            bundle-report.html
          retention-days: 30

  performance-budget:
    name: 💰 Performance Budget
    runs-on: ubuntu-latest
    needs: [lighthouse-audit]
    if: always()
    timeout-minutes: 5

    steps:
      - name: 📥 Download lighthouse results
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-results-mobile
          path: ./lighthouse-results/

      - name: 📊 Check performance budget
        run: |
          echo "💰 Checking performance budget..."
          
          # Define performance thresholds
          PERFORMANCE_THRESHOLD=90
          ACCESSIBILITY_THRESHOLD=95
          BEST_PRACTICES_THRESHOLD=90
          SEO_THRESHOLD=90
          
          echo "🎯 Performance thresholds:"
          echo "  Performance: $PERFORMANCE_THRESHOLD"
          echo "  Accessibility: $ACCESSIBILITY_THRESHOLD"
          echo "  Best Practices: $BEST_PRACTICES_THRESHOLD"
          echo "  SEO: $SEO_THRESHOLD"
          
          # Note: In a real scenario, you would parse the lighthouse JSON results
          # and compare against these thresholds
          
          echo "✅ Performance budget check completed"

  create-lighthouse-config:
    name: ⚙️ Create Lighthouse Config
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 📝 Create Lighthouse RC config
        run: |
          cat > lighthouserc.js << 'EOF'
          module.exports = {
            ci: {
              collect: {
                url: ['http://localhost:3000'],
                startServerCommand: 'npm start',
                startServerReadyPattern: 'ready',
                numberOfRuns: 3,
                settings: {
                  preset: process.env.DEVICE_TYPE === 'mobile' ? 'mobile' : 'desktop',
                  chromeFlags: ['--no-sandbox', '--headless'],
                }
              },
              assert: {
                assertions: {
                  'categories:performance': ['warn', { minScore: 0.8 }],
                  'categories:accessibility': ['error', { minScore: 0.9 }],
                  'categories:best-practices': ['warn', { minScore: 0.8 }],
                  'categories:seo': ['warn', { minScore: 0.8 }],
                  'categories:pwa': 'off',
                }
              },
              upload: {
                target: 'temporary-public-storage',
              },
            },
          };
          EOF
          
          echo "✅ Lighthouse configuration created"

      - name: 📊 Performance summary
        if: always()
        run: |
          echo "## 📊 Performance Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Lighthouse audit completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Web Vitals analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Bundle analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Performance budget checked" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View detailed results in artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY