name: 🚀 Deploy to GitHub Pages

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 22 LTS
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Build with Next.js
        run: npm run build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./out

  build-and-deploy:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    timeout-minutes: 20

    environment:
      name: ${{ needs.pre-deploy.outputs.deploy-env }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --production=false
          echo "✅ Dependencies installed"

      - name: 🔨 Build application
        run: |
          npm run build
          echo "✅ Application built successfully"
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: 🚀 Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          production: ${{ needs.pre-deploy.outputs.deploy-env == 'production' }}

      - name: 📝 Update deployment status
        if: always()
        run: |
          if [[ "${{ steps.deploy.outcome }}" == "success" ]]; then
            echo "✅ Deployment successful!"
            echo "🌐 URL: ${{ steps.deploy.outputs.preview-url }}"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi

  deploy-fallback:
    name: 🔄 Fallback Deployment
    runs-on: ubuntu-latest
    needs: [pre-deploy, build-and-deploy]
    if: always() && needs.pre-deploy.outputs.should-deploy == 'true' && needs.build-and-deploy.result == 'failure'
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build with fallback config
        run: |
          # Create fallback build without optimizations
          npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: 🚀 Deploy to Netlify (Fallback)
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './out'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Fallback deployment from commit ${{ github.sha }}"
          enable-pull-request-comment: false
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  post-deploy:
    name: 📊 Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always() && needs.build-and-deploy.result == 'success'

    steps:
      - name: 🏃‍♂️ Trigger performance audit
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'performance.yml',
              ref: 'main'
            });

      - name: 📢 Notify deployment success
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📊 Triggering performance audit..."