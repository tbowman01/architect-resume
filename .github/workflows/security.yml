name: 🔒 Security Scans

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM UTC
  workflow_dispatch:

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: 🔍 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 NPM Audit
        run: |
          echo "🔍 Running npm audit..."
          npm audit --audit-level=moderate || {
            echo "⚠️ npm audit found vulnerabilities"
            npm audit --audit-level=moderate --json > audit-results.json
            echo "📊 Audit results saved"
          }

      - name: 📊 Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: audit-results.json
          retention-days: 30

      - name: 🛡️ Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=package.json
        continue-on-error: true

      - name: 📋 Upload Snyk results to GitHub Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
        continue-on-error: true

  codeql-analysis:
    name: 🔍 CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        language: ['javascript']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🔧 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: 🏗️ Build application
        run: |
          npm ci --prefer-offline --no-audit
          npm run build
        env:
          NODE_ENV: production

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  secret-scan:
    name: 🔐 Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🔍 TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🔍 GitLeaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  docker-security:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name != 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐳 Build Docker image
        run: |
          cat > Dockerfile.security << 'EOF'
          FROM node:20-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production --no-audit
          COPY . .
          RUN npm run build
          EXPOSE 3000
          CMD ["npm", "start"]
          EOF
          
          docker build -f Dockerfile.security -t architect-resume:security .

      - name: 🔍 Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'architect-resume:security'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📋 Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  license-check:
    name: 📜 License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 📜 License Check
        run: |
          npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;CC0-1.0' || {
            echo "⚠️ License compliance issues found"
            npx license-checker --detailed > license-report.txt
            echo "📊 Detailed license report saved"
          }

      - name: 📊 Upload license report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.txt
          retention-days: 30

  security-headers:
    name: 🛡️ Security Headers Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build and start application
        run: |
          npm run build
          npm start &
          sleep 15
        env:
          NODE_ENV: production

      - name: 🛡️ Check security headers
        run: |
          echo "🔍 Checking security headers..."
          
          # Check for security headers
          HEADERS=$(curl -I -s http://localhost:3000)
          
          echo "📊 Response headers:"
          echo "$HEADERS"
          
          # Check for required security headers
          if echo "$HEADERS" | grep -i "x-frame-options"; then
            echo "✅ X-Frame-Options header found"
          else
            echo "⚠️ X-Frame-Options header missing"
          fi
          
          if echo "$HEADERS" | grep -i "x-content-type-options"; then
            echo "✅ X-Content-Type-Options header found"
          else
            echo "⚠️ X-Content-Type-Options header missing"
          fi
          
          echo "✅ Security headers check completed"

  security-report:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-analysis, secret-scan, license-check]
    if: always()

    steps:
      - name: 📊 Generate security summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Scan: ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Secret Detection: ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- License Check: ${{ needs.license-check.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View detailed results](https://github.com/${{ github.repository }}/security)" >> $GITHUB_STEP_SUMMARY

      - name: 🚨 Security Alert
        if: needs.dependency-scan.result == 'failure' || needs.codeql-analysis.result == 'failure'
        run: |
          echo "🚨 SECURITY ALERT: Critical security issues detected!"
          echo "Please review the scan results and address any high-severity vulnerabilities."
          exit 1