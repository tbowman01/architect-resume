name: 🏷️ Release & Version Management

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      released: ${{ steps.semantic-release.outputs.new_release_published }}
      version: ${{ steps.semantic-release.outputs.new_release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js 22 LTS
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --passWithNoTests

      - name: Build project
        run: npm run build

      - name: Semantic Release
        id: semantic-release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 22
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Manual Release (if workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Bump version based on input
          case "${{ github.event.inputs.release_type }}" in
            "major")
              NEW_VERSION=$(npm version major --no-git-tag-version)
              ;;
            "minor")
              NEW_VERSION=$(npm version minor --no-git-tag-version)
              ;;
            "patch")
              NEW_VERSION=$(npm version patch --no-git-tag-version)
              ;;
          esac
          
          # Remove 'v' prefix for clean version
          NEW_VERSION=${NEW_VERSION#v}
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          # Create git tag and release
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json
          git commit -m "chore(release): $NEW_VERSION"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin main --tags

      - name: Create GitHub Release (manual)
        if: github.event_name == 'workflow_dispatch' && env.NEW_VERSION
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          body: |
            ## What's Changed
            
            **Release Type:** ${{ github.event.inputs.release_type }}
            
            ### 🚀 Features & Improvements
            - Architect portfolio template ready for deployment
            - Blog and AI chatbot functionality
            - Responsive design and modern UI
            
            ### 🛠️ Technical Details
            - Node.js 22 LTS compatibility
            - Next.js optimized build
            - TypeScript support
            - Tailwind CSS styling
            
            ### 📦 Template Usage
            1. Use this repository as a template
            2. Customize the content in `app/data/`
            3. Modify colors and styling in `tailwind.config.ts`
            4. Deploy to GitHub Pages or your preferred platform
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ env.PREVIOUS_VERSION || '0.0.0' }}...v${{ env.NEW_VERSION }}
          draft: false
          prerelease: false

  template-sync:
    name: Sync Template Repository
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Update template metadata
        run: |
          # Update template-specific files
          echo "Latest version: v${{ needs.release.outputs.version }}" >> TEMPLATE_INFO.md
          echo "Last updated: $(date)" >> TEMPLATE_INFO.md

      - name: Commit template updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "docs: update template info for v${{ needs.release.outputs.version }}" || exit 0
          git push