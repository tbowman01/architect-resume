#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function colorText(text, color) {
  return `${colors[color]}${text}${colors.reset}`;
}

function showBanner() {
  console.log(colorText('\nüèõÔ∏è ARCHITECT RESUME TEMPLATE SETUP', 'cyan'));
  console.log(colorText('=====================================\n', 'cyan'));
  console.log('Welcome to the Architect Resume Template setup wizard!');
  console.log('This will help you customize the template with your information.\n');
}

const questions = [
  {
    key: 'USER_NAME',
    prompt: 'üë§ What is your full name?',
    required: true
  },
  {
    key: 'USER_TITLE',
    prompt: 'üíº What is your professional title? (e.g., "Senior Architect", "Urban Designer")',
    required: true
  },
  {
    key: 'USER_BIO',
    prompt: 'üìù Enter your professional bio (2-3 sentences):',
    required: true
  },
  {
    key: 'CONTACT_EMAIL',
    prompt: 'üìß What is your email address?',
    required: true,
    validate: (input) => {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(input) || 'Please enter a valid email address';
    }
  },
  {
    key: 'CONTACT_PHONE',
    prompt: 'üì± What is your phone number? (Optional, press Enter to skip)',
    required: false
  },
  {
    key: 'CONTACT_LOCATION',
    prompt: 'üìç What is your location? (e.g., "San Francisco, CA")',
    required: false
  },
  {
    key: 'LINKEDIN_URL',
    prompt: 'üîó What is your LinkedIn URL? (Optional, press Enter to skip)',
    required: false,
    validate: (input) => {
      if (!input) return true;
      const urlRegex = /^https?:\/\/([\w\-]+\.)?linkedin\.com/;
      return urlRegex.test(input) || 'Please enter a valid LinkedIn URL';
    }
  },
  {
    key: 'GITHUB_USERNAME',
    prompt: 'üë®‚Äçüíª What is your GitHub username? (for deployment)',
    required: false
  },
  {
    key: 'GITHUB_REPO',
    prompt: 'üìÇ What will be your GitHub repository name? (e.g., "my-portfolio")',
    required: false,
    default: 'portfolio'
  }
];

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function askQuestion(question) {
  return new Promise((resolve) => {
    const prompt = colorText(question.prompt, 'yellow');
    const suffix = question.required ? colorText(' (required)', 'red') : '';
    const defaultText = question.default ? colorText(` [default: ${question.default}]`, 'blue') : '';
    
    rl.question(`${prompt}${suffix}${defaultText}: `, (answer) => {
      const value = answer.trim() || question.default || '';
      
      // Validate input if validator exists
      if (question.validate) {
        const validation = question.validate(value);
        if (validation !== true) {
          console.log(colorText(`‚ùå ${validation}`, 'red'));
          resolve(askQuestion(question)); // Ask again
          return;
        }
      }
      
      // Check if required field is empty
      if (question.required && !value) {
        console.log(colorText('‚ùå This field is required', 'red'));
        resolve(askQuestion(question)); // Ask again
        return;
      }
      
      resolve({ key: question.key, value });
    });
  });
}

async function collectAnswers() {
  const answers = {};
  
  for (const question of questions) {
    const answer = await askQuestion(question);
    answers[answer.key] = answer.value;
    console.log(colorText('‚úÖ Saved!', 'green'));
  }
  
  return answers;
}

function createEnvFile(answers) {
  const envPath = path.join(process.cwd(), '.env.local');
  
  let envContent = '# Generated by setup-template.js\n# Feel free to customize these values\n\n';
  
  // Add all the answers
  Object.entries(answers).forEach(([key, value]) => {
    if (value) {
      envContent += `${key}="${value}"\n`;
    }
  });
  
  // Add default feature flags
  envContent += `
# Feature Configuration
ENABLE_BLOG=true
ENABLE_CHATBOT=true
ENABLE_PORTFOLIO=true
ENABLE_TESTIMONIALS=true
ENABLE_DARK_MODE=false

# Branding
PRIMARY_COLOR="#8a7855"
ACCENT_COLOR="#d4af37"
HEADING_FONT="Playfair Display"
BODY_FONT="Inter"
`;
  
  fs.writeFileSync(envPath, envContent);
  console.log(colorText(`\n‚úÖ Created ${envPath}`, 'green'));
}

function updatePackageJson(answers) {
  const packageJsonPath = path.join(process.cwd(), 'package.json');
  
  if (fs.existsSync(packageJsonPath)) {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    
    // Update package name and description
    if (answers.USER_NAME) {
      const slugName = answers.USER_NAME.toLowerCase().replace(/\s+/g, '-');
      packageJson.name = `${slugName}-portfolio`;
      packageJson.description = `Professional portfolio for ${answers.USER_NAME}`;
    }
    
    // Update repository URL if GitHub info provided
    if (answers.GITHUB_USERNAME && answers.GITHUB_REPO) {
      packageJson.repository = {
        type: 'git',
        url: `https://github.com/${answers.GITHUB_USERNAME}/${answers.GITHUB_REPO}.git`
      };
      packageJson.homepage = `https://${answers.GITHUB_USERNAME}.github.io/${answers.GITHUB_REPO}`;
    }
    
    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
    console.log(colorText('‚úÖ Updated package.json', 'green'));
  }
}

function updateNextConfig(answers) {
  if (!answers.GITHUB_USERNAME || !answers.GITHUB_REPO) return;
  
  const configPath = path.join(process.cwd(), 'next.config.js');
  
  if (fs.existsSync(configPath)) {
    let configContent = fs.readFileSync(configPath, 'utf8');
    
    // Update basePath and assetPrefix for GitHub Pages
    const basePath = `/${answers.GITHUB_REPO}`;
    
    if (configContent.includes('basePath:')) {
      configContent = configContent.replace(/basePath:\s*['"`][^'"`]*['"`]/, `basePath: '${basePath}'`);
    } else {
      configContent = configContent.replace('module.exports = {', `module.exports = {\n  basePath: '${basePath}',`);
    }
    
    if (configContent.includes('assetPrefix:')) {
      configContent = configContent.replace(/assetPrefix:\s*['"`][^'"`]*['"`]/, `assetPrefix: '${basePath}/'`);
    } else {
      configContent = configContent.replace('module.exports = {', `module.exports = {\n  assetPrefix: '${basePath}/',`);
    }
    
    fs.writeFileSync(configPath, configContent);
    console.log(colorText('‚úÖ Updated next.config.js for GitHub Pages', 'green'));
  }
}

function showNextSteps(answers) {
  console.log(colorText('\nüéâ SETUP COMPLETE!', 'green'));
  console.log(colorText('==================\n', 'green'));
  
  console.log('Your template has been configured. Here are your next steps:\n');
  
  console.log(colorText('1. üìù CUSTOMIZE CONTENT:', 'cyan'));
  console.log('   ‚Ä¢ Edit your portfolio projects in app/components/Portfolio.tsx');
  console.log('   ‚Ä¢ Update your experience in app/components/Experience.tsx');
  console.log('   ‚Ä¢ Modify your skills in app/components/Skills.tsx');
  console.log('   ‚Ä¢ Add your education details in app/components/Education.tsx\n');
  
  console.log(colorText('2. üñºÔ∏è ADD YOUR IMAGES:', 'cyan'));
  console.log('   ‚Ä¢ Replace images in public/images/ with your photos');
  console.log('   ‚Ä¢ Update image references in components\n');
  
  console.log(colorText('3. üé® CUSTOMIZE STYLING (Optional):', 'cyan'));
  console.log('   ‚Ä¢ Modify colors in tailwind.config.ts');
  console.log('   ‚Ä¢ Update fonts in app/layout.tsx\n');
  
  console.log(colorText('4. üöÄ DEPLOY YOUR SITE:', 'cyan'));
  console.log('   ‚Ä¢ Run: npm run build');
  console.log('   ‚Ä¢ Run: npm run export');
  if (answers.GITHUB_USERNAME) {
    console.log(`   ‚Ä¢ Push to GitHub repository: ${answers.GITHUB_USERNAME}/${answers.GITHUB_REPO}`);
    console.log('   ‚Ä¢ Enable GitHub Pages in repository settings\n');
  }
  
  console.log(colorText('5. üìñ READ THE DOCS:', 'cyan'));
  console.log('   ‚Ä¢ Check out the documentation in the docs/ folder');
  console.log('   ‚Ä¢ Read CUSTOMIZATION.md for detailed customization options\n');
  
  console.log(colorText('Need help? Visit: https://github.com/architect-resume/template/issues', 'blue'));
}

async function main() {
  try {
    showBanner();
    
    const answers = await collectAnswers();
    
    console.log(colorText('\nüîß Setting up your template...', 'yellow'));
    
    createEnvFile(answers);
    updatePackageJson(answers);
    updateNextConfig(answers);
    
    showNextSteps(answers);
    
  } catch (error) {
    console.error(colorText(`\n‚ùå Setup failed: ${error.message}`, 'red'));
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Handle Ctrl+C gracefully
rl.on('SIGINT', () => {
  console.log(colorText('\n\n‚ùå Setup cancelled by user', 'red'));
  rl.close();
  process.exit(1);
});

main();